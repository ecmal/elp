{
  "version": 3,
  "file": "config.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/elp/src",
  "sources": [
    "config.ts"
  ],
  "names": [],
  "mappings": ";;QAKM,OAAO;IAEb;QAmCY,0BAAS,GAAjB;YACI,EAAE,CAAA,CAAC,CAAC,YAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA,CAAC;gBACrB,YAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;QACL,CAAC;QAEO,4BAAW,GAAnB;YACI,EAAE,CAAA,CAAC,CAAC,YAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA,CAAC;gBACxB,YAAE,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,IAAI,CAAC,QAAQ,GAAG,YAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC;QACO,gCAAe,GAAvB;YACI,mBAAQ,CAAC,GAAG,CAAC,4BAAiB,CAAC,CAAC;YAChC,mBAAQ,CAAC,GAAG,CAAC,yBAAc,CAAC,CAAC;QACjC,CAAC;QACO,6BAAY,GAApB,cAAuB,CAAC;QAExB,qBAAI,GAAJ;YACI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QACL,aAAC;QAjCG;YApBO,QAAG,GAAO;gBACb,IAAI,EAAG,OAAO,CAAC,GAAG,CAAC,IAAI;gBACvB,IAAI,EAAG,OAAO,CAAC,GAAG,CAAC,IAAI;aAC1B,CAAC;YACK,aAAQ,GAAO;gBAClB,QAAQ,EAAO,MAAM;gBACrB,QAAQ,EAAO,MAAM;gBACrB,MAAM,EAAS;oBACX,GAAG,EAAQ,oBAAoB;oBAC/B,OAAO,EAAI,6CAA6C;oBACxD,QAAQ,EAAG,MAAM;oBACjB,QAAQ,EAAG,MAAM;iBACpB;gBACD,SAAS,EAAM;oBACX,GAAG,EAAQ,uBAAuB;oBAClC,OAAO,EAAI,gDAAgD;oBAC3D,QAAQ,EAAG,MAAM;oBACjB,QAAQ,EAAG,MAAM;iBACpB;aACJ,CAAC;YAEE,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,IAAI,GAAG,YAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAC,GAAG,GAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpD,IAAI,CAAC,MAAM,GAAG,YAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAC,aAAa,CAAC,CAAC;YAClD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzC,CAAC;IA2BL,CAAC,AA7DD,IA6DC;;IA7DD,+BA6DC,CAAA;;;;;;;;;;;;YA/DK,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YAEpC,qBAAA,MA6DC;YAED,wBAAe,IAAI,MAAM,EAAE,EAAA",
  "sourcesContent": [
    "import FS from './utils/fs';\nimport {Registry} from \"./models/registry\";\nimport {BitbucketRegistry} from \"./models/registry\";\nimport {GithubRegistry} from \"./models/registry\";\n\nconst process = system.node.process;\n\nexport class Config {\n\n    public name : string;\n    public home : string;\n    public config : string;\n    public dirname : string;\n    public filename : string;\n\n    public env:any = {\n        home : process.env.HOME,\n        path : process.env.PATH\n    };\n    public settings:any = {\n        username     : \"none\",\n        password     : \"none\",\n        github       : {\n            url      : \"https://github.com\",\n            pattern  : \"https://github.com/%{vendor}/%{project}.git\",\n            username : \"none\",\n            password : \"none\"\n        },\n        bitbucket    : {\n            url      : \"https://bitbucket.org\",\n            pattern  : \"https://bitbucket.org/%{vendor}/%{project}.git\",\n            username : \"none\",\n            password : \"none\"\n        }\n    };\n    constructor(){\n        this.name = 'elp';\n        this.home = FS.resolve(this.env.home,'.'+this.name);\n        this.config = FS.resolve(this.home,'config.json');\n        this.dirname = system.node.dirname;\n        this.filename = system.node.filename;\n    }\n    private checkHome(){\n        if(!FS.isDir(this.home)){\n            FS.createDir(this.home);\n        }\n    }\n\n    private checkConfig(){\n        if(!FS.isFile(this.config)){\n            FS.writeJson(this.config,this.settings);\n        }else{\n            this.settings = FS.readJson(this.config);\n        }\n    }\n    private checkRegistries(){\n        Registry.add(BitbucketRegistry);\n        Registry.add(GithubRegistry);\n    }\n    private checkPlugins(){}\n\n    load():Promise<Config>{\n        this.checkHome();\n        this.checkConfig();\n        this.checkPlugins();\n        this.checkRegistries();\n        return Promise.resolve(this);\n    }\n}\n\nexport default new Config()"
  ]
}