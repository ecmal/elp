{
  "version": 3,
  "file": "registry.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/elp/src",
  "sources": [
    "registry.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {Url} from \"./url\";\nimport config from '../config';\nimport FileSystem from \"../utils/fs\";\n\nconst URL           = system.node.require('url');\nconst ID:symbol     = Symbol('id');\nconst REGISTRIES    = {};\n\n\nexport class Registry {\n\n    static for(url):Registry{\n        var regs:Registry[] = this.all();\n        for(var reg of regs){\n            if(reg.matches(url)){\n                return reg;\n            }\n        }\n        return null;\n    }\n\n    static all():Registry[]{\n        return Object.keys(REGISTRIES).map(k=>this.get(k));\n    }\n    static get(url:string|Url):Registry {\n        var name:string;\n        if(url instanceof Url){\n            name = url.registry;\n        }else{\n            name = <string>url;\n        }\n        if(name && REGISTRIES[name]) {\n            return <Registry>(new (<ObjectConstructor>REGISTRIES[name])());\n        }else{\n            throw new Error(`Unknown registry '${name}' for module '${url}'`);\n        }\n    }\n    static add(type:any){\n        REGISTRIES[type[ID]] = type;\n    }\n    get id(){\n        return this.constructor[ID];\n    }\n    get options(){\n        return config.settings[this.id]\n    }\n    remote(url){\n        return this.options.pattern\n            .replace('%{vendor}',url.vendor)\n            .replace('%{project}',url.project);\n    }\n    matches(url){\n        var u1 = URL.parse(url);\n        var u2 = URL.parse(this.options.pattern);\n        return u1.hostname == u2.hostname;\n    }\n    local(url){\n        return FileSystem.resolve(config.home,'registry',url.vendor,url.project);\n    }\n    toString(){\n        return `Registry(${this.id},${JSON.stringify(this.options,null,2)})`;\n    }\n    inspect(){\n        return this.toString();\n    }\n}\n\nexport class GitRegistry extends Registry {\n\n}\nexport class BitbucketRegistry extends GitRegistry {\n    static [ID] = 'bitbucket';\n}\nexport class GithubRegistry extends GitRegistry {\n    static [ID] = 'github';\n}"
  ]
}