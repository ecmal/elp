import { Repository } from "../utils/git";
import { Remotes } from "../utils/git";
import { Status } from "../utils/git";
import { Compiler } from "../compiler/compiler";
import { Source } from "./source";
export declare type Sources = {
    [k: string]: Source;
};
export declare type Deps = {
    [k: string]: Project;
};
export declare class Project {
    static read(path: string): Project;
    filename: string;
    dirname: string;
    config: any;
    sources: Sources;
    sourcesAll: Source[];
    sourcesSelf: Source[];
    git: Repository;
    release: Repository;
    compiler: Compiler;
    remotes: Remotes;
    status: Status;
    deps: Deps;
    format: string;
    target: string;
    bundle: string;
    core: string;
    name: string;
    vendor: string;
    version: string;
    registry: string;
    dirs: any;
    main: string;
    constructor(path: any);
    sourceDir: string;
    testsDir: string;
    vendorDir: string;
    outputDir: string;
    patch(props: any): this;
    watch(tests?: boolean): void;
    compile(tests?: boolean, bundle?: string, exec?: boolean): void;
    install(): void;
    publish(force?: boolean): void;
    clean(): void;
    toString(full?: boolean): string;
    private inspect();
    private readFs(tests?);
    private readGit(branch?);
    private readSourcesFromGit(branch?, main?);
    private readSourcesFromFs(tests?, main?);
    private readDependencies();
    private compileSources();
    private writeSources();
    private watchSources(tests?);
    private bundleSources(exec?, filename?);
    private writePackage();
    private compilePackage();
    private writeSource(s);
}
