{
  "version": 3,
  "file": "gitignore.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/elp/src",
  "sources": [
    "gitignore.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "export class GitIgnore {\n\n    public include:RegExp[];\n    public exclude:RegExp[];\n\n    constructor(content){\n        var parsed = parseContent(content);\n        this.include = parsed[0];\n        this.exclude = parsed[1];\n    }\n    accepts(input:string):boolean {\n        if (input[0] === '/') input = input.slice(1);\n        return this.exclude[0].test(input) || !this.include[0].test(input);\n    }\n    denies(input:string):boolean {\n        if (input[0] === '/') input = input.slice(1);\n        return !(this.exclude[0].test(input) || !this.include[0].test(input));\n    }\n    maybe(input:string):boolean {\n        if (input[0] === '/') input = input.slice(1);\n        return this.exclude[1].test(input) || !this.include[1].test(input);\n    }\n}\n\nfunction parseContent(content) {\n    return content.split('\\n')\n        .map(function (line) {\n            line = line.trim();\n            return line;\n        })\n        .filter(function (line) {\n            return line && line[0] !== '#';\n        })\n        .reduce(function (lists, line) {\n            var isNegative = line[0] === '!';\n            if (isNegative) {\n                line = line.slice(1);\n            }\n            if (line[0] === '/')\n                line = line.slice(1);\n            if (isNegative) {\n                lists[1].push(line);\n            }\n            else {\n                lists[0].push(line);\n            }\n            return lists;\n        }, [[], []])\n        .map(function (list) {\n            return list\n                .sort()\n                .map(prepareRegexes)\n                .reduce(function (list, prepared) {\n                    list[0].push(prepared[0]);\n                    list[1].push(prepared[1]);\n                    return list;\n                }, [[], [], []]);\n        })\n        .map(function (item) {\n            return [\n                item[0].length > 0 ? new RegExp('^((' + item[0].join(')|(') + '))') : new RegExp('$^'),\n                item[1].length > 0 ? new RegExp('^((' + item[1].join(')|(') + '))') : new RegExp('$^')\n            ]\n        });\n}\n\nfunction prepareRegexes (pattern) {\n    return [\n        // exact regex\n        prepareRegexPattern(pattern),\n        // partial regex\n        preparePartialRegex(pattern)\n    ];\n}\n\nfunction prepareRegexPattern (pattern) {\n    return escapeRegex(pattern).replace('**', '(.+)').replace('*', '([^\\\\/]+)');\n}\n\nfunction preparePartialRegex (pattern) {\n    return pattern\n        .split('/')\n        .map(function (item, index) {\n            if (index)\n                return '([\\\\/]?(' + prepareRegexPattern(item) + '\\\\b|$))';\n            else\n                return '(' + prepareRegexPattern(item) + '\\\\b)';\n        })\n        .join('');\n}\n\nfunction escapeRegex (pattern) {\n    return pattern.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}"
  ]
}